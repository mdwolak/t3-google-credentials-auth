// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "."
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  //t3 attributes
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  //extensions
  password      String?
  role          UserRole  @default(User)
  provider      String?

  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // identityProviderId   String?
  // GroupMember   GroupMember[]
  // Event         Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  User
  Admin
}

model Exemplar {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  content   String
  category  String
  published Boolean @default(false)

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  //@@unique([content, category])
}

model Address {
  id           Int     @id @default(autoincrement())
  line1        String
  line2        String?
  city         String
  county       String?
  postcode     String
  orgId        Int
  isRegistered Boolean @default(false)
  isDefault    Boolean @default(false)

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  activities   Activity[]
  organisation Organisation? @relation(fields: [orgId], references: [id])

  @@index([orgId, line1, postcode])
}

model Activity {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String
  type        Int            @default(0)
  addressId   Int?
  duration    Int            @default(0)
  slug        String
  visible     Boolean        @default(true)
  status      ActivityStatus @default(Draft)
  minAge      Int?
  maxAge      Int?
  position    Int            @default(0)
  data        Json?
  orgId       Int

  owningGroupId Int @default(0)
  //owningGroup   Group? @relation(fields: [owningGroupId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  address      Address?     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  schedules    Schedule[]

  @@unique([orgId, name, status])
  @@unique([owningGroupId, name])
  @@unique([owningGroupId, slug])
}

enum ActivityStatus {
  Draft
  Planned
  OpenToRegistrations
  ClosedToRegistrations
  Ongoing
  Past
  Cancelled
}

model Organisation {
  id          Int                @id @default(autoincrement())
  parentId    Int?
  name        String
  description String?
  type        OrganisationType   @default(Company)
  visible     Boolean            @default(true)
  status      OrganisationStatus @default(Draft)
  data        Json?

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  Addresses  Address[]
  Activities Activity[]

  @@unique([parentId, name])
}

enum OrganisationStatus {
  Prospect //potential organisation
  Lead //engagement with organisation
  Draft //organisation started to set up their account
  Preapproval //organisation has submitted their application
  Active //profile visible to public
  Inactive //profile not visible to public due to inactivity of the organisation
  Suspended //profile not visible to public due to suspension
  Archived //account closed
}

enum OrganisationType {
  Nonprofit
  SelfEmployed
  Company
}

model Schedule {
  id         Int       @id @default(autoincrement())
  name       String?
  startDate  DateTime  @db.Date
  endDate    DateTime? @db.Date
  activityId Int

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  activity     Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  scheduleDays ScheduleDay[]

  @@index([activityId])
}

model ScheduleDay {
  id         Int      @id @default(autoincrement())
  dayOfWeek  Int
  startTime  DateTime @db.Time
  duration   Int
  scheduleId Int

  createdAt   DateTime @default(now())
  createdById Int
  updatedAt   DateTime @updatedAt
  updatedById Int

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, dayOfWeek])
}
